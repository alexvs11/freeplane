repositories {
     maven { url "http://repo.maven.apache.org/maven2" }
}
dependencies {
    compile project(':freeplane')
    compile project(':freeplane_plugin_jsyntaxpane')
    compile 'org.codehaus.groovy:groovy-all:2.3.1'
    compile 'com.fasterxml.jackson.core:jackson-core:2.8.8'
	compile ('org.freeplane.securegroovy:groovy-patcher:0.0.2') {
		transitive = false
	}
    compile 'net.bytebuddy:byte-buddy:1.6.9'
    compile group: 'org.glassfish.jersey.containers', name: 'jersey-container-grizzly2-http', version:'2.25.1'
    //    compile group: 'org.glassfish.jersey.media', name: 'jersey-media-moxy', version:'2.25.1'
    //    compile group: 'org.eclipse.persistence', name: 'org.eclipse.persistence.moxy', version:'2.6.0'
    compile group: 'com.fasterxml.jackson.jaxrs', name: 'jackson-jaxrs-json-provider', version:'2.2.3'
    compile group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version:'2.2.3'
    compile group: 'com.sun.xml.bind', name: 'jaxb-osgi', version:'2.2.11'
}

jar {
    manifest {
        name = pluginid
        symbolicName = pluginid

        configurations.runtime.transitive = true
        def deps = filterAndExternalizePluginDependencies(configurations.runtime.files)
        deps.add(0, "lib/plugin-" + project.version + '.jar')

        attributes 'Class-Path': deps.join(', ')
        attributes 'Bundle-ClassPath': '., ' + deps.join(', ')

        instruction 'Bundle-Vendor', 'Freeplane Project'
        instruction 'Bundle-Activator', pluginid + ".Activator"
        instruction 'Bundle-RequiredExecutionEnvironment', 'JavaSE-1.6'

        def imports = """\
                      org.osgi.framework;version="1.3.0",
                      ${project(':freeplane').jar.manifest.attributes.get('Export-Package')},
                      ${project(':freeplane_plugin_jsyntaxpane').jar.manifest.attributes.get('Export-Package')},
                      """
        instruction 'Import-Package', imports.replaceAll("\\s+", "")
        instruction 'DynamicImport-Package', 'org.eclipse.persistence.internal.*,org.eclipse.persistence.internal.jaxb.*'
        // avoid that bnd creates Private-Package: for org.freeplane.plugin.script.*!
        instruction 'Private-Package', ''

        def exports = """\
                      org.freeplane.plugin.script,
                      org.freeplane.plugin.script.addons,
                      org.freeplane.plugin.script.filter,
                      org.freeplane.plugin.script.proxy
                      """
        // bnd f**cks up the exports, so we bypass it using attributes!
        attributes 'Export-Package': exports.replaceAll("\\s+", "")
        
        // Require-Bundle is ignored by bnd => replaced by Import-Package!
        //instruction 'Require-Bundle', 'org.freeplane.core;bundle-version="1.0.1"'
    }
    into 'resources', {
        from 'src/main/java/org/freeplane/plugin/script/proxy/resources'
    }
}

task copyScripts(type: Copy) {
    from('scripts/') {
        include('**')
    }
    into(globalBuild + '/scripts')
}

javadoc {
    enabled = true

    // we need source from both this and the freeplane project!
    //  source = sourceSets.main.allJava

    ext.javadocInputFromThisProject = fileTree(dir: 'src/main/java')
      .include('**/Proxy.java')
      .include('**/Convertible.java')
      .include('**/FreeplaneScriptBaseClass.java')
      .include('**/ScriptUtils.java')
    ext.javadocInputFromFreeplaneProject = fileTree(dir: '../freeplane/src/main/java')
      .include('**/UITools.java')
      .include('**/TextUtils.java')
      .include('**/FreeplaneVersion.java')
      .include('**/HtmlUtils.java')
      .include('**/LogUtils.java')
      .include('**/MenuUtils.java')

    source = ext.javadocInputFromThisProject + ext.javadocInputFromFreeplaneProject
    destinationDir = new File(globalBuild + '/doc/api/')
}

// TODO: this doesn't work yet!
/*
task zipJavadoc(type: Zip) {
  baseName = 'scripting-api'
  from (globalBuild + '/doc/api/') {
      include('**')
  }
  destinationDir = new File(globalBuild)
  dependsOn javadoc
}
*/

build.dependsOn copyScripts
build.dependsOn javadoc
//build.dependsOn zipJavadoc
